파일 시스템

파일 : 데이터나 실행 코드를 담고 있는 그릇
파일 시스템 : 그릇을 관리하는 시스템

리눅스 파일 시스템
ext1, ext2, ext3, ext4, XFS

하드디스크에 저장됨

연속적으로 할당 : 연속 할당
번호와 상관없이 연결 할당 : 연결 할당
0번이 트리구조로 할당 : 색인 할당

슈퍼블록
1. 전체 inode 개수가 몇개인지
2. 전체 데이터블록 개수
3. 활당 되지 않는 데이터 블록 개수
4. 첫번째 데이터 블록의 주소
5. 블록의 크기

파일 시스템 자체가 망가져서 사용할 수 없게 됨
슈퍼블록은 백업되어 있음.
망가질 경우 복사본을 사용하여 복구시킴.

ext1 : 현재는 사용되지 않음
	   최대 파일 시스템 크기 2 GB
ext2 : 최대 파일 시스템 크기 32 TB
ext3 : 최대 파일 시스템 크기 32 TB, 저널링
ext4 : 최대 파일 시스템 크기 1 EB
XFS	 : 최대 파일 시스템 크기 16 EB

저널링 과정

1. 트랜잭션 시작 - 저널에 기록
2. inode 변경 기록을 저널에 저장
3. 실제로 inode 데이터를 변경
4. 데이터블록 변경 기록 저널에 저장
5. 실제 데이터블록 변경
6. 트랜잭션 완료

중간에 실패하면 복구할려고 함
1. 데이터 블록 일부만 변경이 적용된 경우
	- 데이터 블록을 검사해서 데이터 불일치를 확인하고 조치
2. 데이터 불일치 - 복구가 힘들다.
	- 파일 자체를 롤백(파일이 생성 된 것 자체를 부정)

스프링 부트 : @service 레이어에서 사용하는 개념
			@Transactional CRUD R을 제외하고 사용되는 어노테이션
			@Transactional(readonly) R에서 사용
			중간에 실패하면 저장자체를 안함(롤백)

swap, tmpfs, proc, hfs, vfat

tmpfs : temporary file system(임시 파일 시스템)
시스템이 재시작하면 기존 내용 없어짐.	
마운트
스케일 업 /스케일 아웃

파티션 : 물리적인 저장장치를 논리적인 개념으로 나눈 단위

파티션을 두개로 나눔
sdb1 15g sdb2 10g

sudo fdisk /dev/"파티션이름"

n(파티션생성) -> p(프라이머리) -> 1 -> default -> +15G
n(파티션생성) -> p(프라이머리) -> 2 -> default -> default

-> w(저장)

mkfs(make file system) 명령어로 파일 시스템 적용하기
sudo mkfs -t ext3 /dev/sdb1

sudo mkfs -t ext4 /dev/sdb2

sudo file -s /dev/'파티션이름''파티션숫자' : 파티션 파일 시스템 확인하기

마운트 포인트 생성
sudo mkdir /mnt

마운트 장소 생성
sudo mkdir /mnt/hdd1
sudo mkdir /mnt/hdd2

파티션 마운트
sudo mount /dev/sdb1 /mnt/hdd1
sudo mount /dev/sdb2 /mnt/hdd2

파티션 확인
df -h


